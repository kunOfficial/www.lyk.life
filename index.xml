<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>lyk の tech blog</title>
        <link>http://lyk.github.io/</link>
        <description>呀，被发现了ʕ•ᴥ•ʔ，blog里有一些笔记</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Aug 2023 12:22:37 &#43;0800</lastBuildDate>
            <atom:link href="http://lyk.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Raft</title>
    <link>http://lyk.github.io/posts/raft/</link>
    <pubDate>Sun, 27 Aug 2023 12:22:37 &#43;0800</pubDate>
    <author>lyk</author>
    <guid>http://lyk.github.io/posts/raft/</guid>
    <description><![CDATA[MIT 6.824 2020 lab2 Raft 实现笔记 这个lab我是边看论文、边看课边做的，前前后后花了快2周，非常有挑战性。做完后感触颇深，特别是后来再去了解了一下Paxos后，更感慨raft的大道至简，也钦佩这篇论文的作者——来自Stanford的Diego Ongaro，一是钦佩他的分布式算法设计能力，二是钦佩他的严谨的思维，三是钦佩他的文字表达能力，我虽然从没接触过共识算法，但也能较轻松地看懂论文（唯一 figure 8看了我一个下午我都没看懂，后来上网查才发现好多人也没看懂这个），并根据figure 2来实现一个这样的系统，真可谓是深入浅出。
基础设施 labrpc是模拟了一个网络，网络除了模拟正常的网络延迟，还模拟了异常的情况，比如可能出现丢包（返回ReplyMsg{false, nil}), 长时间延迟等。
config.go里相当于构建了一个raft集群环境，可以通过connect,、disconnect等模拟这个环境可能出现的状况。并通过checkOneLeader等接口可以查看这个环境当前的运行状况。另外还有one函数，会尝试start一个log，并检测集群内是否达到了共识，是主要的test手段。
lab2A 领导人选举 首先，每个raft服务启动时，会开启一个electionTimeOut的计时器，如果计时结束前收到了RequestVote请求。
RequestVote RPC 代码如下，注意，后面关于有关与log的判断是lab2B加上去的。
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) { // Your code here (2A, 2B). rf.mu.Lock() fmt.Printf(&#34;RV from %d to %d received: %+v with curTerm:%d votedFor:%d\n&#34;, args.CandidateId, rf.me, args, rf.currentTerm, rf.votedFor) defer rf.mu.Unlock() reply.Term = rf.currentTerm if args.Term &lt; rf.currentTerm { reply.VoteGranted = false rf.persist() return } if args.Term == rf.]]></description>
</item>
<item>
    <title>CMU15-445 (2022fall) project笔记</title>
    <link>http://lyk.github.io/posts/cmu15-445-2022fall-project%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Wed, 09 Aug 2023 15:29:40 &#43;0800</pubDate>
    <author>lyk</author>
    <guid>http://lyk.github.io/posts/cmu15-445-2022fall-project%E7%AC%94%E8%AE%B0/</guid>
    <description><![CDATA[数据库系统实现技术大作业 这是CMU 15-445 2022fall 的配套项目 bustub 2022fall，也是《数据库系统实现技术》这门选修课的大作业。这里简单记录一下作业的思路。（不过最后一个transaction manager还有些bug, 所以没有形成笔记，之后补上）
Project #0 - C++ Primer 这个项目是做一个简单的Trie树，不属于bustub的主体部分，实现起来也很简单。核心数据结构就是TrieNode, 表示树中的一个顶点，is_end_成员表示该单词是否结束。整体没啥难的。
class TrieNode{ protected: char key_char_; /** whether this node marks the end of a key */ bool is_end_{false}; /** A map of all child nodes of this trie node, which can be accessed by each * child node&#39;s key char. */ std::unordered_map&lt;char, std::unique_ptr&lt;TrieNode&gt;&gt; children_; } 主要是熟悉C++以及bustub的编码风格，以及一些工具的使用，包括用CMake\Make构建项目、用Clang-tidy来优化编码风格、用GDB来debug、用第三方库GoogleTest来进行单例测试等。
Project #1 - Buffer Pool 从这个部分开始，就进入Bustub的主体部分了。目标就是实现一个Buffer Pool Manager, 分成了3个小任务。]]></description>
</item>
<item>
    <title>MIT 6.824 2020   lab1-MapReduce实现笔记</title>
    <link>http://lyk.github.io/posts/map_reduce/</link>
    <pubDate>Tue, 08 Aug 2023 11:55:30 &#43;0800</pubDate>
    <author>lyk</author>
    <guid>http://lyk.github.io/posts/map_reduce/</guid>
    <description><![CDATA[MIT 6.824 2020 lab1-MapReduce实现笔记 花了几天时间做了这个lab, 算是入了分布式的门。一开始没啥头绪，但想明白Master需要维护哪些元信息，Master和Worker何时需要进行的rpc通信这些基本问题后，思路就渐渐明朗。得益于Go语言的简洁、方便的gorountine、GC、自带的RPC框架(虽然不知道为什么*Arg和*Reply不能传nil指针，传nil指针会导致RPC调用的结果有问题，关键是不提示有问题），实现起来也非常轻松，几乎没有心智负担。
以下是我的一些笔记，这门课不允许在网上公开代码，但是为了便于描述，我还是将一部分核心代码贴了出来。
Master和Worker的定义 命名方式随意了点：）
看变量名大概就能知道什么意思，需要补充的是，TaskStatus的Start表示未被分配，Processing表示有worker正在处理，而Done表示该任务已经完成。
另外，Master会维持一个全局的global_phase变量，用来指示现在所处的阶段，lifetime是 MapPhase -&gt; ReducePhase -&gt; CompletedPhase。并通过维护done_cnt计数器来知晓现在完成的Map/Reduce Task的数量，在全部完成时，进行Phase的转换。
type Phase int8 type TaskType int8 type TaskStatus int8 // global phase const ( MapPhase Phase = iota ReducePhase CompletedPhase ) // TaskType const ( Map TaskType = iota Reduce Wait Exit ) // TaskStatus const ( Start TaskStatus = iota Processing Done ) type MapTask struct { // machine_id int NReduce int TaskId int InputFile string Status TaskStatus // iter_files []string Time time.]]></description>
</item>
<item>
    <title>First_post</title>
    <link>http://lyk.github.io/posts/first_post/</link>
    <pubDate>Tue, 21 Mar 2023 16:06:40 &#43;0800</pubDate>
    <author>lyk</author>
    <guid>http://lyk.github.io/posts/first_post/</guid>
    <description><![CDATA[hello world!
打算开始写博客啦]]></description>
</item>
</channel>
</rss>
