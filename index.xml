<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>lyk の tech blog</title>
        <link>http://lyk.github.io/</link>
        <description>呀，被发现了ʕ•ᴥ•ʔ，blog里有一些笔记</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Aug 2023 12:22:37 &#43;0800</lastBuildDate>
            <atom:link href="http://lyk.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>MIT 6.824 2020 lab2 Raft 实现笔记</title>
    <link>http://lyk.github.io/posts/raft/</link>
    <pubDate>Sun, 27 Aug 2023 12:22:37 &#43;0800</pubDate>
    <author>lyk</author>
    <guid>http://lyk.github.io/posts/raft/</guid>
    <description><![CDATA[MIT 6.824 2020 lab2 Raft 实现笔记 这个lab我是边看论文、边看课边做的，前前后后花了快2周，非常有挑战性。做完后感触颇深，特别是后来再去了解了一下Paxos后，更感慨raft的大道至简，也钦佩这篇论文的作者——来自Stanford的Diego Ongaro，一是钦佩他的分布式算法设计能力，二是钦佩他的严谨的思维，三是钦佩他的文字表达能力，我虽然从没接触过共识算法，但也能较轻松地看懂论文（唯一 figure 8看了我一个下午我都没看懂，后来上网查才发现好多人也没看懂这个），并根据figure 2来实现一个这样的系统，真可谓是深入浅出。
基础设施 labrpc是模拟了一个网络，网络除了模拟正常的网络延迟，还模拟了异常的情况，比如可能出现丢包（返回ReplyMsg{false, nil}), 长时间延迟等。
config.go里相当于构建了一个raft集群环境，可以通过connect,、disconnect等模拟这个环境可能出现的状况。并通过checkOneLeader等接口可以查看这个环境当前的运行状况。另外还有one函数，会尝试start一个log，并检测集群内是否达到了共识，是主要的test手段。
lab2A 领导人选举 首先，每个raft服务启动时，会开启一个electionTimeOut的计时器，如果计时结束前收到了RequestVote请求。
RequestVote RPC 代码如下，注意，后面关于有关与log的判断是lab2B加上去的。
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) { // Your code here (2A, 2B). rf.mu.Lock() fmt.Printf(&#34;RV from %d to %d received: %+v with curTerm:%d votedFor:%d\n&#34;, args.CandidateId, rf.me, args, rf.currentTerm, rf.votedFor) defer rf.mu.Unlock() reply.Term = rf.currentTerm if args.Term &lt; rf.currentTerm { reply.VoteGranted = false rf.persist() return } if args.Term == rf.]]></description>
</item>
<item>
    <title>CMU15-445 (2022fall) project笔记</title>
    <link>http://lyk.github.io/posts/cmu15-445-2022fall-project%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Wed, 09 Aug 2023 15:29:40 &#43;0800</pubDate>
    <author>lyk</author>
    <guid>http://lyk.github.io/posts/cmu15-445-2022fall-project%E7%AC%94%E8%AE%B0/</guid>
    <description><![CDATA[数据库系统实现技术大作业 这是CMU 15-445 2022fall 的配套项目 bustub 2022fall，也是《数据库系统实现技术》这门选修课的大作业。这里简单记录一下作业的思路。（不过最后一个transaction manager还有些bug, 所以没有形成笔记，之后补上）
Project #0 - C++ Primer 这个项目是做一个简单的Trie树，不属于bustub的主体部分，实现起来也很简单。核心数据结构就是TrieNode, 表示树中的一个顶点，is_end_成员表示该单词是否结束。整体没啥难的。
class TrieNode{ protected: char key_char_; /** whether this node marks the end of a key */ bool is_end_{false}; /** A map of all child nodes of this trie node, which can be accessed by each * child node&#39;s key char. */ std::unordered_map&lt;char, std::unique_ptr&lt;TrieNode&gt;&gt; children_; } 主要是熟悉C++以及bustub的编码风格，以及一些工具的使用，包括用CMake\Make构建项目、用Clang-tidy来优化编码风格、用GDB来debug、用第三方库GoogleTest来进行单例测试等。
Project #1 - Buffer Pool 从这个部分开始，就进入Bustub的主体部分了。目标就是实现一个Buffer Pool Manager, 分成了3个小任务。]]></description>
</item>
<item>
    <title>MIT 6.824 2020   lab1-MapReduce实现笔记</title>
    <link>http://lyk.github.io/posts/map_reduce/</link>
    <pubDate>Tue, 08 Aug 2023 11:55:30 &#43;0800</pubDate>
    <author>lyk</author>
    <guid>http://lyk.github.io/posts/map_reduce/</guid>
    <description><![CDATA[MIT 6.824 2020 lab1-MapReduce实现笔记 花了几天时间做了这个lab, 算是入了分布式的门。一开始没啥头绪，但想明白Master需要维护哪些元信息，Master和Worker何时需要进行的rpc通信这些基本问题后，思路就渐渐明朗。得益于Go语言的简洁、方便的gorountine、GC、自带的RPC框架(虽然不知道为什么*Arg和*Reply不能传nil指针，传nil指针会导致RPC调用的结果有问题，关键是不提示有问题），实现起来也非常轻松，几乎没有心智负担。
以下是我的一些笔记，这门课不允许在网上公开代码，但是为了便于描述，我还是将一部分核心代码贴了出来。
Master和Worker的定义 命名方式随意了点：）
看变量名大概就能知道什么意思，需要补充的是，TaskStatus的Start表示未被分配，Processing表示有worker正在处理，而Done表示该任务已经完成。
另外，Master会维持一个全局的global_phase变量，用来指示现在所处的阶段，lifetime是 MapPhase -&gt; ReducePhase -&gt; CompletedPhase。并通过维护done_cnt计数器来知晓现在完成的Map/Reduce Task的数量，在全部完成时，进行Phase的转换。
type Phase int8 type TaskType int8 type TaskStatus int8 // global phase const ( MapPhase Phase = iota ReducePhase CompletedPhase ) // TaskType const ( Map TaskType = iota Reduce Wait Exit ) // TaskStatus const ( Start TaskStatus = iota Processing Done ) type MapTask struct { // machine_id int NReduce int TaskId int InputFile string Status TaskStatus // iter_files []string Time time.]]></description>
</item>
<item>
    <title>First_post</title>
    <link>http://lyk.github.io/posts/first_post/</link>
    <pubDate>Tue, 21 Mar 2023 16:06:40 &#43;0800</pubDate>
    <author>lyk</author>
    <guid>http://lyk.github.io/posts/first_post/</guid>
    <description><![CDATA[hello world!
打算开始写博客啦]]></description>
</item>
<item>
    <title></title>
    <link>http://lyk.github.io/posts/miniob%E5%88%9D%E8%B5%9B%E8%AE%B0%E5%BD%95/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://lyk.github.io/posts/miniob%E5%88%9D%E8%B5%9B%E8%AE%B0%E5%BD%95/</guid>
    <description><![CDATA[miniob 2023 初赛记录 写在前面 第一次参加miniob，记录一下初赛。总体来说没有什么技术难度，大部分是体力活，但也让我复习了不少数据库细节上的东西，比如MVCC、SQL解析与查询计划构建等等。记录是为了以后再参加时可以给自己或者其他同学做参考。
各题思路 Drop table 这个sql解析语法已经写好了，需要做的是添加一个drop_table_executor，然后为Db类（管理数据库的元数据的类）添加一个drop_table函数，函数内需要删除一个table的元数据文件、index文件、data文件，然后还需要回收bufferpool中该文件对应的页，成功的话再将该table的tableMeta从Db类中删除即可，此时就完成了一个table的完全清理。
update 这个虽然分值不高，但是涵盖了从sql层解析到底层table分页存储的内容。具体来说，包括：
增加update语句的sql解析 增加updateStatement\updateLogicalOperator\updatePhyicalOperator，并在各个stage中添加构建这些对象的链路，至于这些对象需要哪些字段以及如何构建，可以参考select和delete的链路。 增加tablehandler-&gt;update_record()、pagehandler-&gt;update_record函数，为updatePhyicalOperator提供存储上的支持。tablehandler-&gt;update_record()除了修改data文件，还需要修改对应的索引（现在只支持b+tree索引，需要先delete再insert)。 Null 增加建表的时候的语法，为table增加元信息nullable； 增加Value的null字段，标识该字段是否为null。在insert value时，如果是NULL，则将 null 赋值为true； 为where增加 is null 和 is not null 语法； 在insert和update时，在executor或者resolver阶段检查插入的数据是否允许null，如果允许，则插入为一个特殊的值，对于INT来说，插入INT_MIN, FLOAT:FLOAT_MIN, CHAR(N): &lsquo;/0&rsquo;，这里在从record中存储数据以及读取数据为value时，提供一下判NULL支持。 新增compareType IS和IS_NOT，在表达式进行比较时，如果两边value有任意一个为null，则判断比较运算符是否为IS或者IS_NOT，如果不是，直接判false；如果是，则返回 (left.is_null() == left.is_null()) == (cmptype==IS) 可能需要在别的地方加上对NULL特判的支持，比如聚合函数。 以下是mysql的做法，每个coloumn一个bit表示是否是null(https://cloud.tencent.com/developer/article/1469056) 这是关于mysql 与null有关的index上走没走索引的讨论 aggregation-func 除了sql层添加的语法，主要增加了一个aggregation的逻辑和物理算子，在select查询计划中，放在查询计划的顶端（和projection 平级），即predicate以上的位置。agg算子的逻辑可以认为是bustub中group by算子的子集，功能还很弱，只能输出一行数据。
另外，这里还涉及到schema的问题，miniob中的schema表示的是数据的输出字段显示格式，具体在RC ExecuteStage::handle_request_with_physical_operator(SQLStageEvent *sql_event)。在agg这个题目中，由于需要为聚合字段添加名字，所以需要在这个函数中添加命名方式。比如“MIN(字段名)”等。
所有权的设计挺有意思的，可以详细写一下, 包括swap和move（生成phyical operator时从sqlnode move过来而不是采用指针引用，可以使之后的执行减少一次访存的开销）
过测例的时候发现，恶心的是强制要求把很多能在parse阶段解决的错误延后到resolve阶段，使得需要重新设计sql部分。
sub-query 采用物化的方法，优先进行子查询，然后将子查询的结果作为Value(或者vector)放在predicate_operator中。具体来说，这是通过给predicate_operator加child做到的。predicate_operator在open时，会检查自己有几个children，如果有两个children，说明第二个children是一个子查询，则优先进行子查询，利用得到的结果构造出最终的predicate expression。本质上是将expression的构造时间延后了。
为了支持IN/NOT算子，设计了一个新的ExprType，称为ExistExpr，继承自Expresion，其内部维护一个Value集合。get_value时根据查询值是否在这个Value集合返回一个bool值。
过测例时发现update的set value字段也可以是一个subquery, 我采用的还是加child的方式，不过这次是加到update_operator后面，逻辑也是一样的，open时发现有两个children则优先进行子查询。本质上是将value的构造时间延后了。
multi-index 修改存储在index文件中第一页的元数据 实现最左匹配：在生成物理执行计划时判断table get能不能走索引，用最左匹配原则。如果有，则需要构造出left key和right key，剩下的无法走索引的字段左右分别设置为最小值和最大值即可。注意，由于这里我的NULL值是比MIN（MIN设计的是NULL+1)还小的值，所以左边界是NULL。 另：logical_operator重写阶段实现了谓词下推（predicate pushdown)，所以在table_get_logical operator构建物理执行计划时，如果有谓词，再尝试使用索引即可，如果有索引，构建index_scan的物理执行计划。 **text ** 弄个新的TextPage, header存char_num, char_num表示这个page中存的实际数据有多少， next_page指示下一个TextPage的page_num。读取时，当char_num == FULL_CHAR_NUM &amp;&amp; next_page !]]></description>
</item>
</channel>
</rss>
